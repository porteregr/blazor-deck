@using BlazorDeck.Shared.ComponentModels.Displays.Builders
@using VxFormGenerator.Core
@using BlazorDeck.Shared.ComponentModels
@using BlazorDeck.Shared.ComponentModels.Tiles.Builders
@using System.Reflection
@using BlazorDeck.Shared.ComponentModels.Actions.Builders

@if (tileBuilder != null && OriginalTile != null)
{
    <EditForm Model="@tileBuilder"
              OnValidSubmit="HandleValidSubmit"
              OnInvalidSubmit="HandleInValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <RenderFormElements></RenderFormElements>
        <InputSelect @bind-Value="@selectedActionType" @onchange="@SelectedActionChanged">
            @foreach (var actionType in actionTypes)
                {
                <option value="@actionType">@actionType.Name</option>
                }
        </InputSelect>
        @if (tileActionBuilder != null)
        {
            <EditForm Context="actionContext" Model="@tileActionBuilder"
                      OnValidSubmit="HandleValidSubmit"
                      OnInvalidSubmit="HandleInValidSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <RenderFormElements></RenderFormElements>
                <button class="btn btn-primary" type="submit">Submit</button>
            </EditForm>
        }
        <InputSelect @bind-Value="@selectedDisplayType">
            @foreach (var displayType in displayTypes)
                {
                <option value="@displayType">@displayType.Name</option>
                }
        </InputSelect>
        <EditForm Context="displayContext" Model="@tileDisplayBuilder"
              OnValidSubmit="HandleValidSubmit"
              OnInvalidSubmit="HandleInValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <RenderFormElements></RenderFormElements>
            <button class="btn btn-primary" type="submit">Submit</button>
        </EditForm>
        @if (selectedServerType != null)
        {
            <InputSelect @bind-Value="@selectedServerType">
                @foreach (var serverType in serverTypes)
                        {
                    <option value="@serverType">@serverType.Name</option>
                        }
            </InputSelect>
        }
        <button class="btn btn-primary" type="submit">Submit</button>
    </EditForm>
}

@code {
    // TODO: Add Builders for the other tile objects
    // Add new tile support to create the ouput tile
    // Determine if a publish system is needed for the new tile
    // Add at tile preview that uses the builder output with out needing to press submit?
    [Parameter]
    public TileDefinition OriginalTile { get; set; }
    [Parameter]
    public TileDefinition NewTile { get; set; }
    private TileDefinitionBuilder tileBuilder = null;
    // Action
    private List<TypeSelection> actionTypes;
    private TypeSelection selectedActionType;
    private ITileAction TileAction;
    private ITileActionBuilder tileActionBuilder;
    // Display
    private List<TypeSelection> displayTypes;
    private TypeSelection selectedDisplayType;
    private ITileDisplayBuilder tileDisplayBuilder;
    private ITileDisplay TileDisplay;
    // Server Event
    private List<TypeSelection> serverTypes;
    private TypeSelection selectedServerType;
    private IServerEvent ServerEvent;

    protected override void OnInitialized()
    {
        LoadTypes();
        ConfigureBuilders();
    }

    protected override void OnParametersSet()
    {

        ConfigureBuilders();
    }

    private void ConfigureBuilders()
    {
        if (OriginalTile == null)
        {
            return;
        }
        tileBuilder = new TileDefinitionBuilder(OriginalTile);
        selectedActionType = GetTypeBuilderType(actionTypes, OriginalTile.Action.GetType());
        tileActionBuilder = GetActionBuilder(selectedActionType, OriginalTile.Action);
        selectedDisplayType = GetTypeBuilderType(displayTypes, OriginalTile.Display.GetType());
        tileDisplayBuilder = GetDisplayBuilder(selectedDisplayType, OriginalTile.Display);
        // same here
        selectedServerType = OriginalTile.ToggleEvent != null ? new TypeSelection(OriginalTile.ToggleEvent?.GetType().GetTypeInfo()): null;
        StateHasChanged();
    }

    private TypeSelection GetTypeBuilderType(List<TypeSelection> typeInfos, Type typeInfo)
    {
        return typeInfos.Where((buildertype) => buildertype.TypeInfo.ImplementedInterfaces.Any((implementedInterface) =>
            implementedInterface.GenericTypeArguments.Contains(typeInfo))).FirstOrDefault();
    }

    private ITileActionBuilder GetActionBuilder(TypeSelection builderType, ITileAction tileAction)
    {
        var constructor = builderType.TypeInfo.GetConstructor(tileAction != null ? new[] { tileAction.GetType() }: new Type[0]);
        return constructor.Invoke(tileAction != null ? new[] { tileAction } : new Type[0]) as ITileActionBuilder;
    }

    private ITileDisplayBuilder GetDisplayBuilder(TypeSelection builderType, ITileDisplay tileDisplay)
    {
        var constructor = builderType.TypeInfo.GetConstructor(new[] { tileDisplay.GetType() });
        return constructor.Invoke(new[] { tileDisplay }) as ITileDisplayBuilder;
    }

    private void LoadTypes()
    {
        actionTypes = LoadType<ITileActionBuilder>();
        displayTypes = LoadType<ITileDisplayBuilder>();
        serverTypes = LoadType<IServerEvent>();
    }

    private List<TypeSelection> LoadType<T>()
    {
        var types = new List<TypeSelection>();
        var baseAssembly = Assembly.GetExecutingAssembly();
        var assemblies = baseAssembly.GetReferencedAssemblies().Where((assembly) => assembly.FullName.StartsWith("BlazorDeck"));
        foreach (var assembly in assemblies)
        {
            var assemblyRef = Assembly.Load(assembly);
            types.AddRange(assemblyRef.DefinedTypes.Where(ti => ti.ImplementedInterfaces.Contains(typeof(T))).Select((typeInfo) => new TypeSelection(typeInfo)));
        }
        return types;
    }

    private void SelectedActionChanged(ChangeEventArgs changeEventArgs){
        if(changeEventArgs.Value == null){
            return;
        }
        var selected = changeEventArgs.Value as TypeSelection;
        ITileAction tileAction = null; 
        if(selected.TypeInfo == OriginalTile.Action.GetType()){
            tileAction = OriginalTile.Action;
        }
        tileActionBuilder = GetActionBuilder(selected, tileAction);
    }

    private void HandleValidSubmit(EditContext context)
    {
        // This can be replaced one the display and event builders are in place
        //NewTile = tileBuilder.BuildTileDefinition(tileActionBuilder.BuildTileAction(),
        //selectedDisplayType.GetConstructor(new Type[])?.Invoke(),);

    }

    private void HandleInValidSubmit(EditContext context)
    {
        // Do something
    }

    private class TypeSelection{
        public string Name { get; }
        public TypeInfo TypeInfo { get; }
        public TypeSelection(TypeInfo typeInfo){
            Name = typeInfo.Name;
            TypeInfo = typeInfo;
        }
    }
}
