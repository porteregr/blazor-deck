@using BlazorDeck.Shared.BaseClasses
@using BlazorDeck.Shared.ComponentModels.Displays.Builders
@using BlazorDeck.Shared.ComponentModels.ServerEvents
@using BlazorDeck.Shared.ComponentModels.ServerEvents.Builders
@using VxFormGenerator.Core
@using BlazorDeck.Shared.ComponentModels
@using BlazorDeck.Shared.ComponentModels.Tiles.Builders
@using System.Reflection
@using BlazorDeck.Shared.ComponentModels.Actions.Builders
@using BlazorDeck.Client.Shared.CustomFormComponents

@if (tileBuilder != null && OriginalTile != null)
{
    <EditForm Model="@tileBuilder"
              OnValidSubmit="HandleValidSubmit"
              OnInvalidSubmit="HandleInValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <RenderFormElements></RenderFormElements>
        <GenericSelect @bind-Selected="@SelectedActionType" Values="actionTypes"/>
        @if (tileActionBuilder != null)
        {
            <EditForm Context="actionContext" Model="@tileActionBuilder"
                      OnValidSubmit="HandleValidSubmit"
                      OnInvalidSubmit="HandleInValidSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <RenderFormElements></RenderFormElements>
            </EditForm>
        }
        <GenericSelect @bind-Selected="@SelectedDisplayType" Values="displayTypes"/>
        @if (tileDisplayBuilder != null){
            <EditForm Context="displayContext" Model="@tileDisplayBuilder"
              OnValidSubmit="HandleValidSubmit"
              OnInvalidSubmit="HandleInValidSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <RenderFormElements></RenderFormElements>
            </EditForm>
        }

        @if (tileBuilder.Togglable)
        {
            <GenericSelect @bind-Selected="@SelectedServerType" Values="serverTypes" />
            @if (serverEventBuilder != null)
            {
                <EditForm Context="serverContext" Model="@serverEventBuilder"
              OnValidSubmit="HandleValidSubmit"
              OnInvalidSubmit="HandleInValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <RenderFormElements></RenderFormElements>
                </EditForm>
            }
        }
        <button class="btn btn-primary" type="submit">Update</button>
    </EditForm>
    @if (NewTile != null){
        <Tile definition="NewTile"/>
    }
}

@code {
    // TODO: 
    // Add new tile support to create the ouput tile
    // Determine if a publish system is needed for the new tile
    // Add at tile preview that uses the builder output with out needing to press submit?
    [Parameter]
    public TileDefinition OriginalTile { get; set; }
    [Parameter]
    public TileDefinition NewTile { get; set; }
    private TileDefinitionBuilder tileBuilder = null;

    // Action
    private List<TypeSelection> actionTypes;
    private TypeSelection selectedActionType;
    private TypeSelection SelectedActionType { 
        get => selectedActionType; 
        set {
            selectedActionType = value;
            tileActionBuilder = GetNewOrOriginalTilePropertyBuilder<ITileActionBuilder, ITileAction>(value, OriginalTile.Action);
        }
    }
    private ITileActionBuilder tileActionBuilder;

    // Display
    private List<TypeSelection> displayTypes;
    private TypeSelection selectedDisplayType;
    private TypeSelection SelectedDisplayType { 
        get => selectedDisplayType;
        set {
            selectedDisplayType = value;
            tileDisplayBuilder = GetNewOrOriginalTilePropertyBuilder<ITileDisplayBuilder, ITileDisplay>(value, OriginalTile.Display);
        }
    }
    private ITileDisplayBuilder tileDisplayBuilder;

    // Server Event
    private List<TypeSelection> serverTypes;
    private TypeSelection selectedServerType;
    private TypeSelection SelectedServerType { 
        get => selectedServerType;
        set {
            selectedServerType = value;
            serverEventBuilder = GetNewOrOriginalTilePropertyBuilder<IServerEventBuilder, IServerEvent>(value, OriginalTile.ToggleEvent ?? new NullServerEvent());
        }
    }
    private IServerEventBuilder serverEventBuilder;

    protected override void OnInitialized()
    {
        LoadTypes();
    }

    protected override void OnParametersSet()
    {
        ConfigureBuilders();
    }

    private void LoadTypes()
    {
        actionTypes = LoadType<ITileActionBuilder>();
        displayTypes = LoadType<ITileDisplayBuilder>();
        serverTypes = LoadType<IServerEventBuilder>();
    }

    private List<TypeSelection> LoadType<T>()
    {
        var types = new List<TypeSelection>();
        var baseAssembly = Assembly.GetExecutingAssembly();
        var assemblies = baseAssembly.GetReferencedAssemblies().Where((assembly) => assembly.FullName.StartsWith("BlazorDeck"));
        foreach (var assembly in assemblies)
        {
            var assemblyRef = Assembly.Load(assembly);
            types.AddRange(assemblyRef.DefinedTypes.Where(ti => ti.ImplementedInterfaces.Contains(typeof(T))).Select((typeInfo) =>
            {
                var builderInterface = typeInfo.ImplementedInterfaces?.FirstOrDefault(implmented => implmented.Name.Contains("IBuilderFor")).GetGenericArguments()[0];
                return builderInterface == null ? null : new TypeSelection(typeInfo, builderInterface);
            }).Where(typeSelection => typeSelection != null));
        }
        return types;
    }

    private void ConfigureBuilders()
    {
        if (OriginalTile == null)
        {
            return;
        }
        tileBuilder = new TileDefinitionBuilder(OriginalTile);
        SelectedActionType = GetTypeBuilderType(actionTypes, OriginalTile.Action.GetType());
        SelectedDisplayType = GetTypeBuilderType(displayTypes, OriginalTile.Display.GetType());
        SelectedServerType = OriginalTile.ToggleEvent != null ? GetTypeBuilderType(serverTypes, OriginalTile.ToggleEvent.GetType())
            : GetTypeBuilderType(serverTypes, typeof(NullServerEvent));
        StateHasChanged();
    }

    private TypeSelection GetTypeBuilderType(List<TypeSelection> typeInfos, Type typeInfo)
    {
        return typeInfos.Where((buildertype) => buildertype.TypeInfo.ImplementedInterfaces.Any((implementedInterface) =>
            implementedInterface.GenericTypeArguments.Contains(typeInfo))).FirstOrDefault();
    }

    private TTileBuilder GetNewOrOriginalTilePropertyBuilder<TTileBuilder, TTileProperty>(TypeSelection selected, TTileProperty orginalTileProperty) where TTileBuilder: class{
        TTileProperty tileAction = default(TTileProperty); 
        if (selected.BuilderFor == orginalTileProperty.GetType())
        {
            tileAction = orginalTileProperty;
        }
        return GetBuilder<TTileBuilder, TTileProperty>(selected, tileAction);
    }

    private TBuilder GetBuilder<TBuilder, TTileProperty>(TypeSelection builderType, TTileProperty tileProperty) where TBuilder : class
    {
        var constructor = builderType.TypeInfo.GetConstructor(tileProperty != null ? new[] { tileProperty.GetType() } : new Type[0]);
        return constructor.Invoke(tileProperty != null ? new object[] { tileProperty } : new object[0]) as TBuilder;
    }

    private void HandleValidSubmit(EditContext context)
    {
        // This can be replaced one the display and event builders are in place
        NewTile = tileBuilder.BuildTileDefinition(tileActionBuilder.BuildTileAction(),
        tileDisplayBuilder.BuildTileDisplay(), serverEventBuilder?.BuildServerEvent());

    }

    private void HandleInValidSubmit(EditContext context)
    {
        // Do something
    }
}
