@using Client.Services;
@using BlazorDeck.Shared.ComponentModels.Displays;
@using BlazorComponentUtilities;
@inject ActionRouter actionRouter;
@implements IDisposable;

<div class="@Classes" style="@Style" @onclick="Click">
    @if (definition.Display is TextTileDisplayDefinition textTileDisplayDefinition)
    {
        <BlazorDeck.Client.Shared.TileDisplays.TextTileDisplay definition="textTileDisplayDefinition" />
    }
    @if (definition.Display is IconTileDisplayDefinition iconTileDisplayDefinition)
    {
        <BlazorDeck.Client.Shared.TileDisplays.IconTileDisplay definition="iconTileDisplayDefinition" />
    }
    @if (definition.Display is SvgTileDisplayDefinition svgTileDisplayDefinition)
    {
        <BlazorDeck.Client.Shared.TileDisplays.SvgTileDisplay definition="svgTileDisplayDefinition" />
    }
    @if (definition.Display is DigitalClockDisplayDefinition digitalClockTileDisplayDefinition)
    {
        <BlazorDeck.Client.Shared.TileDisplays.DigitalClockTileDisplay definition="digitalClockTileDisplayDefinition" />
    }
</div>

@using BlazorDeck.Shared.ComponentModels
@code {
    [Parameter]
    public TileDefinition definition { get; set; }
    [Parameter]
    public bool activated { get { return _activated; }
        set {
            _activated = value;
            UpdateStyle();
            StateHasChanged();
        } }
    private bool _activated = false;
    private string Style { get; set; }
    private string Classes { get; set; }
    private const int baseSize = 100;
    private const int margin = 5;

    protected override void OnInitialized()
    {
        UpdateStyle();
        RegisterServerEvent();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        UpdateStyle();
        RegisterServerEvent();
        base.OnParametersSet();
    }

    private void UpdateStyle()
    {
        Style = new CssBuilder()
            .AddValue($"width: {definition.Width * baseSize + ((definition.Width - 1)*(margin *2))}px;")
            .AddValue($"height: {definition.Height * baseSize + ((definition.Height - 1) * (margin * 2))}px;")
            .Build();

        var classesBuilder = new CssBuilder()
            .AddClass("tile");

        if (activated)
        {
            classesBuilder.AddClass("activated");
        }

        Classes = classesBuilder.Build();
    }

    protected override Task OnParametersSetAsync()
    {
        UnRegisterServerEvent();
        return base.OnParametersSetAsync();
    }

    private void RegisterServerEvent()
    {
        if(definition.ToggleEvent == null)
        {
            return;
        }
        activated = definition.ToggleEvent.State;
        definition.ToggleEvent.EventActive += ServerEventActive;
        definition.ToggleEvent.EventInactive += ServerEventInActive;
    }

    private void UnRegisterServerEvent()
    {
        if (definition.ToggleEvent == null)
        {
            return;
        }
        definition.ToggleEvent.EventActive -= ServerEventActive;
        definition.ToggleEvent.EventInactive -= ServerEventInActive;
    }

    private void ServerEventActive(object sender, EventArgs e)
    {
        if (definition.Togglable)
        {
            activated = true;
        }
    }

    private void ServerEventInActive(object sender, EventArgs e)
    {
        if (definition.Togglable)
        {
            activated = false;
        }
    }

    private void Click()
    {
        actionRouter.RunAction(definition.Action);
        if (definition.Togglable)
        {
            activated = !activated;
        }
    }

    public void Dispose()
    {
        UnRegisterServerEvent();
    }
}
