@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ServerEventManager serverEventHandler
@inject NavActionRunner navActionRunner
@inject IdleManager idleManager
@using BlazorDeck.Shared.ComponentModels
@using BlazorDeck.Client.Services;
@using BlazorDeck.Client.Services.ServerEventHandlers;
@using BlazorDeck.Client.Services.ActionRunners;
@using BlazorAnimate;

@if (tilePageDefinitions != null)
{
    <div class="nav-container">
        @{int i = 0;}
        @foreach (var tilePageDefinition in tilePageDefinitions.OrderBy((tilePageDefinition) => tilePageDefinition.NavTile.Priority))
        {
            <Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromMilliseconds(250)" Delay="TimeSpan.FromMilliseconds(i++ * 50)">
                <Tile definition=@tilePageDefinition.NavTile activated="tilePageDefinition == activeTilePage"></Tile>
            </Animate>
        }
    </div>
    <TilePage definition=@activeTilePage></TilePage>
}

@code {
    [Parameter]
    public IEnumerable<TilePageDefinition> TilePageDefinitions { get; set; }
    private IEnumerable<TilePageDefinition> tilePageDefinitions;
    public TilePageDefinition activeTilePage { get; private set; }
    private TilePageDefinition defaultPage;

    protected override async Task OnInitializedAsync()
    {
        tilePageDefinitions = TilePageDefinitions;
        ConfigureEvents();
        await ConfigurePages();
    }

    protected override async Task OnParametersSetAsync()
    {
        var newBook = TilePageDefinitions != tilePageDefinitions;
        tilePageDefinitions = TilePageDefinitions;
        if (newBook)
        {
            await ConfigurePages();
        }
    }

    private void SetActivePage(TilePageDefinition tilePageDefinition)
    {
        activeTilePage = tilePageDefinition;
        StateHasChanged();
    }

    private void SetDefaultPage()
    {
        activeTilePage = defaultPage ?? tilePageDefinitions.First();
        StateHasChanged();
    }

    private void HandleNavEvent(object sender, EventArgs args)
    {
        if (sender is NavTileAction navAction)
        {
            var navActionPage = tilePageDefinitions.FirstOrDefault((tilePageDefinition) => string.Equals(navAction.PageName, tilePageDefinition.Name));
            if (navActionPage == null)
            {
                return;
            }
            SetActivePage(navActionPage);
        }
    }

    private void ConfigureEvents()
    {
        navActionRunner.NavEvent += HandleNavEvent;
    }

    private async Task ConfigurePages()
    {
        foreach (var tilePageDefinition in tilePageDefinitions)
        {
            if (tilePageDefinition.DefaultPage)
            {
                defaultPage = tilePageDefinition;
            }

            tilePageDefinition.NavEvent.EventActive += (sender, args) => SetActivePage(tilePageDefinition);
            tilePageDefinition.NavEvent.EventInactive += (sender, arg) => SetDefaultPage();
        }
        SetDefaultPage();
        var serverEvents = new List<IServerEvent>();
        serverEvents.AddRange(tilePageDefinitions.Select((tilePageDefinition) => tilePageDefinition.NavEvent));
        serverEvents.AddRange(tilePageDefinitions.SelectMany((tilePageDefinition) => tilePageDefinition.Tiles.Where((tile) => tile.ToggleEvent != null).Select((tile) => tile.ToggleEvent)));
        await serverEventHandler.Start(serverEvents);
    }
}
